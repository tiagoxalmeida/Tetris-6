// ProjetoFuncoes.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
int colunas = 10;
int linhas = 20;
int posx = 0;
int posy = 0;
int score = 0;
int quantos_espaços_linha(int* mapa, int linha) {
    int c = 0;
    for (int x = 0; x < colunas; x++) {
        if (mapa[linha * colunas + x] == 0) {
            c++;
        }
    }
    return c;
}
void pontuaçao(int x) {
    if (x == 1) {
        score = score + 80;
    }
    if (x == 2) {
        score = score +20;
    }
    if (x == 3) {
        score = score + 200;
    }
    if (x == 4) {
        score = score + 900;
    }
    if (4 < x) {
        score = score + 500;
    }
}
void remove_andamento(int * mapa) {
    int q = 0;
    for (int i = 0; i < linhas * colunas; i++) {
        if (mapa[i] / 10 == 1) {
            q++;
            mapa[i] = 0;
        }
        if (q == 4) {
            break;
        }
    }
}
bool inserir_peça(int p, int ang, int* mapa) {//p representa qual das 7 peças será desenhada e o ang representa qual o angulo inicial da peça
    if (p == 1) {
        if (ang == 1 || ang == 3) { //assumi que o angulo 1 é o horizontal
            if (colunas < posx + 4) {
                posx = colunas - 4;//isto pq assumi q a posição do player e o quadrado mais a esquerda
            }
            for (int l = 0; l < 4; l++) {
                if (mapa[(linhas - 1) * colunas + posx + l] != 0) {
                    return false;
                }
                mapa[(linhas - 1) * colunas + posx + l] = 11;
            }
            return true;
        }
        if (ang == 2 || ang == 4) {
            for (int x = 0; x < 4; x++) {
                if (mapa[(linhas - 1) * colunas + posx - x * colunas] != 0) {//verifica se ha quatro espaços para baixo na posicaox do player
                    return false;
                }
                mapa[(linhas - 1) * colunas + posx - x * colunas] = 11;
            }
            return true;
        }
        return false;
    }
    if (p == 2) {
        if (ang == 1) {
            if (colunas < posx + 3) {
                posx = colunas - 3;
            }
            if (mapa[(linhas - 1) * colunas + posx] != 0) {
                return false;
            }
            mapa[(linhas - 1) * colunas + posx] = 12;
            for (int l = 0; l < 3; l++) {
                if (mapa[(linhas - 2) * colunas + posx + l] != 0) {
                    return false;
                }
                mapa[(linhas - 2) * colunas + posx + l] = 12;
            }
        }
        if (ang == 2) {
            if (colunas < posx + 2) {
                posx = colunas - 2;
            }
            if (mapa[(linhas - 1) * colunas + posx] != 0 || mapa[(linhas - 1) * colunas + posx + 1] != 0) {
                return false;
            }
            mapa[(linhas - 1) * colunas + posx] = 12;
            mapa[(linhas - 1) * colunas + posx + 1] = 12;
            if (mapa[(linhas - 2) * colunas + posx] != 0 || mapa[(linhas - 3) * colunas + posx] != 0) {
                return false;
            }
            mapa[(linhas - 2) * colunas + posx] = 12;
            mapa[(linhas - 3) * colunas + posx] = 12;
            return true;
        }
        if (ang == 3) {
            if (posx < 2) {
                posx = 2;
            }
            for (int l = 0; l < 3; l++) {
                if (mapa[(linhas - 1) * colunas + posx - l] != 0) {
                    return false;
                }
                mapa[(linhas - 1) * colunas + posx - l] = 12;
            }
            if (mapa[(linhas - 2) * colunas + posx] != 0) {
                return false;
            }
            mapa[(linhas - 2) * colunas + posx] = 12;
            return true;
        }
        if (ang == 4) {
            if (colunas < posx + 2) {
                posx = colunas - 2;
            }
            for (int l = 1; l < 4; l++) {
                if (mapa[(linhas - l) * colunas + posx + 1] != 0) {
                    printf("aqui %d \n", (linhas - l) * colunas + posx + 1);
                    return false;
                }
                mapa[(linhas - l) * colunas + posx + 1] = 12;
            }
            if (mapa[(linhas - 2) * colunas + posx] != 0) {
                return false;
            }
            mapa[(linhas - 3) * colunas + posx] = 12;
            return true;
        }

    }
    if (p == 3) {
        if (ang == 1) {
            if (posx - 3 < -1) {
                posx = 2;
            }
            if (mapa[(linhas - 1) * colunas + posx] != 0) {
                return false;
            }
            mapa[(linhas - 1) * colunas + posx] = 13;
            for (int l = 0; l < 3; l++) {
                if (mapa[(linhas - 2) * colunas + posx - l] != 0) {
                    return false;
                }
                mapa[(linhas - 2) * colunas + posx - l] = 13;
            }
            return true;
        }
        if (ang == 2) {
            if (posx == 0) {
                posx = 1;
            }
            if (mapa[(linhas - 3) * colunas + posx] != 0) {
                return false;
            }
            mapa[(linhas - 3) * colunas + posx] = 13;
            for (int l = 1; l < 4; l++) {
                if (mapa[(linhas - l) * colunas + posx - 1] != 0) {
                    return false;
                }
                mapa[(linhas - l) * colunas + posx - 1] = 13;
            }
            return true;
        }
        if (ang == 3) {
            if (colunas < posx + 3) {
                posx = colunas - 3;
            }
            if (mapa[(linhas - 2) * colunas + posx] != 0) {
                return false;
            }
            mapa[(linhas - 2) * colunas + posx] = 13;
            for (int l = 0; l < 3; l++) {
                if (mapa[(linhas - 1) * colunas + posx + l] != 0) {
                    return false;
                }
                mapa[(linhas - 1) * colunas + posx + l] = 13;
            }
            return true;
        }
        if (ang == 4) {
            if (posx == colunas - 1) {
                posx = colunas - 2;
            }
            if (mapa[(linhas - 1) * colunas + posx] != 0) {
                return false;
            }
            mapa[(linhas - 1) * colunas + posx] = 13;
            for (int l = 0; l < 3; l++) {
                if (mapa[(linhas - 1 - l) * colunas + posx + 1] != 0) {
                    return false;
                }
                mapa[(linhas - 1 - l) * colunas + posx + 1] = 13;
            }
            return true;
        }
    }
    if (p == 4) {
        if (colunas < posx + 2) {
            posx = colunas - 2;
        }
        if (mapa[(linhas - 1) * colunas + posx + 1] != 0 || mapa[(linhas - 1) * colunas + posx] != 0) {
            return false;
        }
        mapa[(linhas - 1) * colunas + posx + 1] = 14;
        mapa[(linhas - 1) * colunas + posx] = 14;
        if (mapa[(linhas - 2) * colunas + posx + 1] != 0 || mapa[(linhas - 2) * colunas + posx] != 0) {
            return false;
        }
        mapa[(linhas - 2) * colunas + posx + 1] = 14;
        mapa[(linhas - 2) * colunas + posx] = 14;
        return true;
    }
    if (p == 5) {
        if (ang == 1 || ang == 3) {
            if (colunas < posx + 3) {
                posx = colunas - 3;
            }
            if (mapa[colunas * (linhas - 1) + posx] != 0 || mapa[colunas * (linhas - 1) + posx + 1] != 0) {
                return false;
            }
            mapa[colunas * (linhas - 1) + posx] = 15;
            mapa[colunas * (linhas - 1) + posx + 1] = 15;
            if (mapa[colunas * (linhas - 2) + posx + 2] != 0 || mapa[colunas * (linhas - 2) + posx + 1] != 0) {
                return false;
            }
            mapa[colunas * (linhas - 2) + posx + 2] = 15;
            mapa[colunas * (linhas - 2) + posx + 1] = 15;
            return true;
        }
        if (ang == 2 || ang == 4) {
            if (posx == 0) {
                posx = 1;
            }
            if (mapa[colunas * (linhas - 1) + posx] != 0 || mapa[colunas * (linhas - 2) + posx] != 0) {
                return false;
            }
            mapa[colunas * (linhas - 1) + posx] = 15;
            mapa[colunas * (linhas - 2) + posx] = 15;
            if (mapa[colunas * (linhas - 2) + posx - 1] != 0 || mapa[colunas * (linhas - 3) + posx - 1] != 0) {
                return false;
            }
            mapa[colunas * (linhas - 2) + posx - 1] = 15;
            mapa[colunas * (linhas - 3) + posx - 1] = 15;
            return true;
        }
    }
    if (p == 6) {
        if (ang == 1 || ang == 3) {
            if (colunas < posx + 3) {
                posx = colunas - 3;
            }
            if (mapa[colunas * (linhas - 2) + posx] != 0 || mapa[colunas * (linhas - 2) + posx + 1] != 0) {
                return false;
            }
            mapa[colunas * (linhas - 2) + posx] = 16;
            mapa[colunas * (linhas - 2) + posx + 1] = 16;
            if (mapa[colunas * (linhas - 1) + posx + 1] != 0 || mapa[colunas * (linhas - 1) + posx + 2] != 0) {
                return false;
            }
            mapa[colunas * (linhas - 1) + posx + 1] = 16;
            mapa[colunas * (linhas - 1) + posx + 2] = 16;
            return true;
        }
        if (ang == 2 || ang == 4) {
            if (posx == colunas - 1) {
                posx = colunas - 2;
            }
            if (mapa[colunas * (linhas - 1) + posx] != 0 || mapa[colunas * (linhas - 2) + posx] != 0) {
                return false;
            }
            mapa[colunas * (linhas - 1) + posx] = 16;
            mapa[colunas * (linhas - 2) + posx] = 16;
            if (mapa[colunas * (linhas - 2) + posx + 1] != 0 || mapa[colunas * (linhas - 3) + posx + 1] != 0) {
                return false;
            }
            mapa[colunas * (linhas - 2) + posx + 1] = 16;
            mapa[colunas * (linhas - 3) + posx + 1] = 16;
            return true;
        }
    }
    if (p == 7) {
        if (ang == 1) {
            if (posx == 0) {
                posx = 1;
            }
            if (posx == colunas - 1) {
                posx = colunas - 2;
            }
            if (mapa[colunas * (linhas - 1) + posx] != 0 || mapa[colunas * (linhas - 2) + posx] != 0) {
                return false;
            }
            mapa[colunas * (linhas - 1) + posx] = 17;
            mapa[colunas * (linhas - 2) + posx] = 17;
            if (mapa[colunas * (linhas - 2) + posx + 1] != 0 || mapa[colunas * (linhas - 2) + posx - 1] != 0) {
                return false;
            }
            mapa[colunas * (linhas - 2) + posx + 1] = 17;
            mapa[colunas * (linhas - 2) + posx - 1] = 17;
            return true;
        }
        if (ang == 2) {
            if (posx == 0) {
                posx = 1;
            }
            if (mapa[colunas * (linhas - 2) + posx] != 0 || mapa[colunas * (linhas - 2) + posx - 1] != 0) {
                return false;
            }
            mapa[colunas * (linhas - 2) + posx] = 17;
            mapa[colunas * (linhas - 2) + posx - 1] = 17;
            if (mapa[colunas * (linhas - 1) + posx - 1] != 0 || mapa[colunas * (linhas - 3) + posx - 1] != 0) {
                return false;
            }
            mapa[colunas * (linhas - 1) + posx - 1] = 17;
            mapa[colunas * (linhas - 3) + posx - 1] = 17;
            return true;
        }
        if (ang == 3) {
            if (posx == 0) {
                posx = 1;
            }
            if (posx == 9) {
                posx = 8;
            }
            if (mapa[colunas * (linhas - 1) + posx] != 0 || mapa[colunas * (linhas - 2) + posx] != 0) {
                return false;
            }
            mapa[colunas * (linhas - 1) + posx] = 17;
            mapa[colunas * (linhas - 2) + posx] = 17;
            if (mapa[colunas * (linhas - 1) + posx + 1] != 0 || mapa[colunas * (linhas - 1) + posx - 1] != 0) {
                return false;
            }
            mapa[colunas * (linhas - 1) + posx + 1] = 17;
            mapa[colunas * (linhas - 1) + posx - 1] = 17;
            return true;
        }
        if (ang == 4) {
            if (posx == colunas - 1) {
                posx = colunas - 2;
            }
            if (mapa[colunas * (linhas - 2) + posx] != 0 || mapa[colunas * (linhas - 2) + posx + 1] != 0) {
                return false;
            }
            mapa[colunas * (linhas - 2) + posx] = 17;
            mapa[colunas * (linhas - 2) + posx + 1] = 17;
            if (mapa[colunas * (linhas - 1) + posx - 1] != 0 || mapa[colunas * (linhas - 3) + posx - 1] != 0) {
                return false;
            }
            mapa[colunas * (linhas - 1) + posx + 1] = 17;
            mapa[colunas * (linhas - 3) + posx + 1] = 17;
            return true;
        }
    }
    else { return false; }
}
void rotacoes(int p, int* mapa, int ang , int lado) {
    remove_andamento(mapa);
    if (!inserir_peça(p, ang + lado, mapa)) {
        remove_andamento(mapa);
        inserir_peça(p, ang, mapa);
    }
}
bool anda_baixo(int* mapa) {
    int p1 = -1, p2 = -1, p3 = -1, p4 = -1, c = 0;
    for (int i = colunas * linhas - 1; -1 < i; i--) {
        if (mapa[i] / 10 != 0) {
            if (c == 0) {
                p1 = i;
            }
            if (c == 1) {
                p2 = i;
            }
            if (c == 2) {
                p3 = i;
            }
            if (c == 3) {
                p4 = i;
            }
            c++;
        }
        if (c == 4) {
            break;
        }
    }
    if (p1< colunas || p2 < colunas || p3 < colunas || p4 < colunas) {
    
        mapa[p1] = mapa[p1] % 10;
        mapa[p2] = mapa[p2] % 10;
        mapa[p3] = mapa[p3] % 10;
        mapa[p4] = mapa[p4] % 10;
        return false;
        }
        if (mapa[p1 - colunas] != 0 && mapa[p1 - colunas] != mapa[p1] ) {
            
            mapa[p1] = mapa[p1] % 10;
            mapa[p2] = mapa[p2] % 10;
            mapa[p3] = mapa[p3] % 10;
            mapa[p4] = mapa[p4] % 10;
            return false;
        }
        if (mapa[p2 - colunas] != 0 && mapa[p2 - colunas] != mapa[p2] ) {
           
            mapa[p1] = mapa[p1] % 10;
            mapa[p2] = mapa[p2] % 10;
            mapa[p3] = mapa[p3] % 10;
            mapa[p4] = mapa[p4] % 10;
            return false;
        }
        if (mapa[p3 - colunas] != 0 && mapa[p3 - colunas] != mapa[p3] ) {
         
            mapa[p1] = mapa[p1] % 10;
            mapa[p2] = mapa[p2] % 10;
            mapa[p3] = mapa[p3] % 10;
            mapa[p4] = mapa[p4] % 10;
            return false;
        }
        if (mapa[p4 - colunas] != 0 && mapa[p4 - colunas] != mapa[p4] ) {
        
            mapa[p1] = mapa[p1] % 10;
            mapa[p2] = mapa[p2] % 10;
            mapa[p3] = mapa[p3] % 10;
            mapa[p4] = mapa[p4] % 10;
            return false;
        }
        int aux1 = mapa[p1], aux2 = mapa[p2], aux3 = mapa[p3], aux4 = mapa[p4];
        mapa[p1] = 0; mapa[p2] = 0; mapa[p3] = 0; mapa[p4] = 0;
        mapa[p1 - colunas] = aux1; mapa[p2 - colunas] = aux2; mapa[p3 - colunas] = aux3; mapa[p4 - colunas] = aux4;
        
        return true;
    
}
bool anda_esquerda(int* mapa) {
    int p1 = -1, p2 = -1, p3 = -1, p4 = -1, c = 0;
    for (int i = colunas * linhas - 1; -1 < i; i--) {
        if (mapa[i] / 10 != 0) {
            if (c == 0) {
                p1 = i;
            }
            if (c == 1) {
                p2 = i;
            }
            if (c == 2) {
                p3 = i;
            }
            if (c == 3) {
                p4 = i;
            }
            c++;
        }
        if (c == 4) {
            break;
        }
    }
    if (p1 % 10 == 0 || p2 % 10 == 0 || p3 % 10 == 0 || p4 % 10 == 0) {
 
        return false;
    }
    if (mapa[p1 - 1] != 0 && mapa[p1 - 1] != mapa[p1]) {
     
        return false;
    }
    if (mapa[p2 - 1] != 0 && mapa[p2 - 1] != mapa[p2]) {
      
        return false;
    }
    if (mapa[p3 - 1] != 0 && mapa[p3 - 1] != mapa[p3]) {
 
        return false;
    }
    if (mapa[p4 - 1] != 0 && mapa[p4 - 1] != mapa[p4]) {
   
        return false;
    }
    int aux1 = mapa[p1], aux2 = mapa[p2], aux3 = mapa[p3], aux4 = mapa[p4];
    mapa[p1] = 0; mapa[p2] = 0; mapa[p3] = 0; mapa[p4] = 0;
    mapa[p1 - 1] = aux1; mapa[p2 - 1] = aux2; mapa[p3 - 1] = aux3; mapa[p4 - 1] = aux4;

    return true;

}
bool anda_direita(int* mapa) {
    //precisa de alterações se o numero das colunas for superior a 10
    int p1 = -1, p2 = -1, p3 = -1, p4 = -1, c = 0;
    for (int i = colunas * linhas - 1; -1 < i; i--) {
        if (mapa[i] / 10 != 0) {
            if (c == 0) {
                p1 = i;
            }
            if (c == 1) {
                p2 = i;
            }
            if (c == 2) {
                p3 = i;
            }
            if (c == 3) {
                p4 = i;
            }
            c++;
        }
        if (c == 4) {
            break;
        }
    }
    if (p1 % 10 == colunas -1 || p2 % 10 == colunas - 1 || p3 % 10 == colunas -1 || p4 % 10 == colunas -1) {
      
        return false;
    }
    if (mapa[p1  +1] != 0 && mapa[p1 + 1] != mapa[p1]) {
       
        return false;
    }
    if (mapa[p2 + 1] != 0 && mapa[p2 + 1] != mapa[p2]) {
       ;
        return false;
    }
    if (mapa[p3 + 1] != 0 && mapa[p3 + 1] != mapa[p3]) {
      
        return false;
    }
    if (mapa[p4 + 1] != 0 && mapa[p4 + 1] != mapa[p4]) {
       
        return false;
    }
    int aux1 = mapa[p1], aux2 = mapa[p2], aux3 = mapa[p3], aux4 = mapa[p4];
    mapa[p1] = 0; mapa[p2] = 0; mapa[p3] = 0; mapa[p4] = 0;
    mapa[p1 + 1] = aux1; mapa[p2 + 1] = aux2; mapa[p3 + 1] = aux3; mapa[p4 + 1] = aux4;

    return true;
}
void display_mapa(int* mapa) {
    for (int i = 0; i < colunas * linhas; i++) {
        printf("%d ", mapa[i]);
        if ((i + 1) % colunas == 0) {
            printf("\n");
        }
    }
}
bool linha_vazia(int* mapa, int linha) {
    for (int x = 0; x < colunas; x++) {
        if (mapa[linha * colunas + x] != 0) {
            return false;
        }
    }
    return true;
}//temos de ter cuidado para nunca chamarmos esta funçao com a linha errada(exemplo haver 20 linhas e chamarmos a 20 da mal pq começa na 0)
bool linha_cheia(int* mapa, int linha) {
    if (linha < 0 || linhas - 1 < linha) {
        return false;
    }
    for (int x = 0; x < colunas; x++) {
        if (mapa[linha * colunas + x] == 0) {
            return false;
        }
    }
    return true;
}//temos de ter cuidado para nunca chamarmos esta funçao com a linha errada(exemplo haver 20 linhas e chamarmos a 20 da mal pq começa na 0)
void substitui_linha(int* mapa, int l1, int l2) {
    for (int x = 0; x < colunas; x++) {
        mapa[l1 * colunas + x] = mapa[l2 * colunas + x];
    }
}
void apaga_linha(int* mapa, int linha) {
    for (int i = linha; i < linhas - 1; i++) {
        substitui_linha(mapa, i, i + 1);
    }
    for (int c = 0; c < colunas; c++) {
        mapa[colunas * (linhas - 1) + c] = 0;
    }
}
int* create_fila() {
    time_t timer;
    struct tm y2k = { 0 };
    double seconds;
    y2k.tm_hour = 0;   y2k.tm_min = 0; y2k.tm_sec = 0;
    y2k.tm_year = 100; y2k.tm_mon = 4; y2k.tm_mday = 9;

    int * fila = (int*)calloc(4, sizeof(int));
 
        time(&timer);  
        seconds = difftime(timer, mktime(&y2k));
        int y = (int)(seconds + 0.5);
        printf("%d\n", y);
        fila[0] = y % 10;
        fila[1] = y / 100 % 10;
        fila[2] = y / 1000 % 10 % 10;
        fila[3] = y / 10 % 10;
        if (y % 10 == 0 || y %10== 8 || y %10 == 9) {
            fila[0] = rand() % 7 + 1;
        }
        if (y /100 % 10 == 0 || y /100 % 10 == 8 || y/100 % 10 == 9) {
            fila[1] = rand() % 7 + 1;
        }
        if (y / 1000 % 10 % 10 == 0 || y / 1000 % 10 % 10 == 8 || y / 1000 % 10 % 10 == 9) {
            fila[2] = rand() % 7 + 1;
        }
        if (y / 10 % 10 == 0 || y /10 % 10 == 8 || y / 10 % 10 == 9) {
            fila[3] = rand() % 7 + 1;
        }
   
    
    return fila;
}
void anda_fila(int* fila) {
    
    for (int i = 0; i < 4-1; i++) {
        fila[i] = fila[i + 1];
    }
    time_t timer;
    struct tm y2k = { 0 };
    double seconds;
    y2k.tm_hour = 0;   y2k.tm_min = 0; y2k.tm_sec = 0;
    y2k.tm_year = 100; y2k.tm_mon = 4; y2k.tm_mday = 9;


    time(&timer);
    seconds = difftime(timer, mktime(&y2k));
    int y = (int)(seconds + 0.5);
    if (y == 0 || y == 8 || y == 9) {
        y = rand() % 7 + 1;
    }
    fila[4 - 1] =y%10;
}

int main()
{
    int * mapa = (int*)calloc(colunas * linhas, sizeof(int));
    int* teste = create_fila();
    
    int ang = rand() % 4 + 1;
    for (int x = 0; x < 4; x++) {
        printf("%d\n", teste[x]);
    }
    time_t timer1, timer2;
    time(&timer1);
    double seconds;
    while (true) {
        time(&timer2);
        seconds = difftime(timer1, timer2);
        if (((int)(seconds + 0.5) + 1) % 10 == 0) {
            printf("cheguei aos 10");
            time(&timer1);
        }
    }
    printf("%d", (int)(seconds + 0.5));
    /*while (inserir_peça(teste[0], ang, mapa)) {
        posy = linhas -1;
        printf("\n fila: ");
        for (int i = 0; i < 4; i++) {
            printf("%d ", teste[i]);
        }


        printf("mapa:  \n");
        display_mapa(mapa);
        bool k = false;
        while (true) {
            time(&timer2);
            seconds = difftime(timer1, timer2);
            if (((int)(seconds + 0.5) + 1) % 10 == 0) {
           k = true;
            time(&timer1);
        }
                if (anda_baixo(mapa) && k) {
                    posy = posy - 1;
                }
                if (!anda_baixo(mapa) && k) {
                    if (!(linha_cheia(mapa, posy)|| linha_cheia(mapa, posy +1)) || linha_cheia(mapa, posy +2) || linha_cheia(mapa, posy + 3) || linha_cheia(mapa, posy + -1) || linha_cheia(mapa, posy - 2) || linha_cheia(mapa, posy -3)){
                        anda_fila(teste, 4);
                        k = false;
                        break;
                    }
                    else {
                        int pont = 0;
                        for (int i = 0; i < linhas; i++) {
                            if (linha_cheia(mapa, i)) {
                                pont++;
                                apaga_linha(mapa, i);
                                pontuaçao(pont);
                                i = 0;
                            }
                            anda_fila(teste, 4);
                            ang = rand() % 4 + 1;
                            k = false;
                            break;
                        }
                    }
                }

            
            //if glwpress_right anda_direita and if true posx = posx+1;
            //if glwpress_left anda_esquerda and if true posx = posx-1;
        }
    }*/
    display_mapa(mapa);

    
    
    
    return 0;
}


